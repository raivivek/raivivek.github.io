<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Vivek Rai (javascript)</title><link>https://vivekiitkgp.github.io/</link><description></description><atom:link rel="self" href="https://vivekiitkgp.github.io/categories/javascript.xml" type="application/rss+xml"></atom:link><language>en</language><lastBuildDate>Sun, 15 Nov 2015 06:27:59 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Creating graphical overview with D3</title><link>https://vivekiitkgp.github.io/blog/creating-graphical-overview-with-d3.html</link><dc:creator>Vivek Rai</dc:creator><description>&lt;div&gt;&lt;p&gt;This is a follow up of the &lt;a class="reference external" href="https://vivekiitkgp.github.io/blog/understanding-blast-output.html"&gt;previous post&lt;/a&gt;
where I was working with understanding and parsing the BLAST output data for
creating the data layer in SequenceServer. A very critical and often demanded
feature for the application was the ability to have a graphical overview of all
the obtained hits. It had been sitting on project's urgent list for quite a
long time and couldn't be delayed any longer. So, after having a discussion
with project maintainer Priyam, I assigned this task to myself.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;There were a couple of options for solving this problem.  Initially, we
considered using &lt;a class="reference external" href="http://chmille4.github.io/Scribl/"&gt;Scribl&lt;/a&gt;, an HTML5 canvas based library written specifically for
drawing genomic regions, alignments, assembly data and so on. However, the
features and flexibility that we were looking for wasn't simply available. And
even if it was, it required a good amount of overriding on our part.&lt;/p&gt;
&lt;img alt="../files/d3.png" class="align-center" src="https://vivekiitkgp.github.io/files/d3.png" style="width: 300pt;"&gt;
&lt;p&gt;The second obvious choice was the use of &lt;a class="reference external" href="http://d3js.org"&gt;d3.js&lt;/a&gt; Javascript library, a powerful
data-driven visualization generator. It's fairly low level and allows a large
degree of custom control and manipulation over components, thereby allowing
users to create rich, high quality graphics rendered in &lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/SVG"&gt;SVG&lt;/a&gt;. The library can
be easily powered by the data obtained directly from the backend layer.
However, a more elegant choice was to remove this dependency on the backend and
disperse all the necessary information inside the page itself using the HTML5
data attributes. These data-attributes would then be highly useful, not only
for obtaining data but also for applying custom styling and dynamic behavior
using JS. For example, you could just do&lt;/p&gt;
&lt;pre class="code js"&gt;&lt;a name="rest_code_b8368f8905864147b9818b4269655293-1"&gt;&lt;/a&gt;&lt;span class="cm"&gt;/* This iterates over all elements with the mentioned data-attrib&lt;/span&gt;
&lt;a name="rest_code_b8368f8905864147b9818b4269655293-2"&gt;&lt;/a&gt;&lt;span class="cm"&gt;   See public/js/jquery.graphit.js */&lt;/span&gt;
&lt;a name="rest_code_b8368f8905864147b9818b4269655293-3"&gt;&lt;/a&gt;&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[data-graphit='overview']"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;a name="rest_code_b8368f8905864147b9818b4269655293-4"&gt;&lt;/a&gt;    &lt;span class="cm"&gt;/* Do stuff here */&lt;/span&gt;
&lt;a name="rest_code_b8368f8905864147b9818b4269655293-5"&gt;&lt;/a&gt;&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;&lt;p&gt;After the basic idea was conceived, I started playing around a little with d3
and found it quite interesting. Priyam then showed me the BLAST interface of
&lt;a class="reference external" href="http://naked-mole-rat.org/blast"&gt;naked-mole-rat.org&lt;/a&gt;, a naked mole-rat
genome resource. They had implemented a graphical overview feature similar to
that used by NCBI except the fact that it was written using d3.&lt;/p&gt;
&lt;div class="figure align-right" style="width: 350pt"&gt;
&lt;a class="reference external image-reference" href="https://vivekiitkgp.github.io/files/ncbi.png"&gt;&lt;img alt="Graphical overview shown by NCBI" src="https://vivekiitkgp.github.io/files/ncbi.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;NCBI's graphical overview (uses tables)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Since, I was relatively new to programming in Javascript, their implementation
really helped me to think of my approach and come up with implementation of
mine. The initial code I wrote went under a lot of changes with feedback from
Priyam. Although we initially started with an inspiration from NCBI's graphical
overview (shown beside) we improved many things over theirs e.g., the hits in
our graphical overview were sorted by evalue, a gradient color scheme to
display the strength and weakness of hits etc.,&lt;/p&gt;
&lt;p&gt;Finally,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Implemented the data collection using data-attribs,&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code rhtml"&gt;&lt;a name="rest_code_d394c0d9c590471d996cd9510e39a8c0-1"&gt;&lt;/a&gt;&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;hit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d394c0d9c590471d996cd9510e39a8c0-2"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
&lt;a name="rest_code_d394c0d9c590471d996cd9510e39a8c0-3"&gt;&lt;/a&gt;      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hsps"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="s2"&gt;"Query_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_hit_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;hit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;a name="rest_code_d394c0d9c590471d996cd9510e39a8c0-4"&gt;&lt;/a&gt;      &lt;span class="na"&gt;data-hsp-evalue=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;evalue&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;data-hsp-start=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qstart&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
&lt;a name="rest_code_d394c0d9c590471d996cd9510e39a8c0-5"&gt;&lt;/a&gt;      &lt;span class="na"&gt;data-hsp-end=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qend&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;data-hsp-frame=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hframe&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d394c0d9c590471d996cd9510e39a8c0-6"&gt;&lt;/a&gt;      &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"table-hsp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
&lt;a name="rest_code_d394c0d9c590471d996cd9510e39a8c0-7"&gt;&lt;/a&gt;    ..
&lt;a name="rest_code_d394c0d9c590471d996cd9510e39a8c0-8"&gt;&lt;/a&gt;  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Packed the whole code in the form of a Jquery &lt;a class="reference external" href="https://github.com/vivekiitkgp/sequenceserver/blob/14d9febd115b02fff1a98e9659e0cb756633e9c9/public/js/jquery.graphit.js"&gt;plugin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Connected the HSPs per hit by a thin line without which the
interpretation of results was little non obvious.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the meantime, we were upgrading to &lt;strong&gt;Bootstrap 3&lt;/strong&gt; which broke and re-broke
my implementation everytime. Each time, when I'll sit to rewrite the it again,
I would come up with a new and better understanding of my code. All this
however, happened only after a lot of experimentation which I didn't talk about
much in the post due to lack of time. Nevertheless, there were also a bunch of
critical bug fixes and improvements in the backend code which can be followed
&lt;a class="reference external" href="https://github.com/vivekiitkgp/sequenceserver/commits/graph_fixtures"&gt;here&lt;/a&gt;. In the end, I feel that the newer and in development version is much
more interactive, elegant and easy to use than the previous ones. Here is a
quick snapshot of the graphical overview for a sample BLAST hit.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://vivekiitkgp.github.io/files/graph.png"&gt;&lt;img alt="SequenceServer's graphical overview" src="https://vivekiitkgp.github.io/files/graph.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;SequenceServer's graphical overview (using D3)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The current source code of the plugin can be found on &lt;a class="reference external" href="https://github.com/vivekiitkgp/sequenceserver/graphic_fixtures"&gt;Github&lt;/a&gt;.  Feel free to
clone and run locally on your machine. If not, an online version has also been
deployed at &lt;a class="reference external" href="http://antgeomes.org/sequenceserver"&gt;antgenomes.org/sequenceserver&lt;/a&gt; for convenient testing. However, I
would like to point out that there will be a lot of planned and unplanned
changes happening frequently. So, if you plan to use SequenceServer for
production, please use &lt;a class="reference external" href="https://github.com/yannickwurm/sequenceserver"&gt;this&lt;/a&gt;
version until we roll out refined one (very soon).&lt;/p&gt;
&lt;p&gt;I wanted to talk more about d3 and my plans to complete a couple of data analysis projects
with its help. However, let's save it for some time later.&lt;/p&gt;&lt;/div&gt;</description><category>d3.js</category><category>javascript</category><category>jquery</category><category>sequenceserver</category><guid>https://vivekiitkgp.github.io/blog/creating-graphical-overview-with-d3.html</guid><pubDate>Fri, 22 Aug 2014 01:52:27 GMT</pubDate></item></channel></rss>