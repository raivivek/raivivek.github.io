<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Vivek Rai (ruby)</title><link>https://vivekiitkgp.github.io/</link><description></description><language>en</language><lastBuildDate>Tue, 12 Aug 2014 11:05:17 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Understanding BLAST Output</title><link>https://vivekiitkgp.github.io/blog/understanding-blast-output.html</link><dc:creator>Vivek Rai</dc:creator><description>&lt;p&gt;In the last post, I mentioned about a project I was trying to work on -
&lt;a href="http://www.sequenceserver.com"&gt;SequenceServer&lt;/a&gt;. Also, in the end I said that
I would be writing about the BLAST algorithm (which is the backbone of this project) 
and how does it works so efficiently in producing alignments even with very long 
sequences. However, In this post I would like to talk about BLAST program and 
it's output before we go into the algorithm some time later.&lt;/p&gt;
&lt;p&gt;After talking to &lt;a href="https://github.com/yeban"&gt;Priyam&lt;/a&gt; (one of the project
collaborators), I decided to work towards solving the &lt;a href="https://github.com/yannickwurm/sequenceserver/issues/21"&gt;issue
21&lt;/a&gt;, which in turn
would help us to solve a large number of other dependent issues as well. This
was supposed to be a major improvement and I really liked the idea of it.
Especially since it was concerned with understanding the BLAST program and its
output format.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://vivekiitkgp.github.io/blog/understanding-blast-output.html"&gt;Read moreâ€¦&lt;/a&gt; (3 min remaining to read)&lt;/p&gt;</description><category>blast</category><category>ruby</category><category>sequenceserver</category><guid>https://vivekiitkgp.github.io/blog/understanding-blast-output.html</guid><pubDate>Sat, 12 Jul 2014 21:17:45 GMT</pubDate></item></channel></rss>