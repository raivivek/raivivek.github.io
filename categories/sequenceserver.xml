<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>Vivek Rai (sequenceserver)</title><link>https://vivekiitkgp.github.io/</link><description></description><language>en</language><lastBuildDate>Sun, 09 Nov 2014 15:54:08 GMT</lastBuildDate><generator>http://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Creating graphical overview with D3</title><link>https://vivekiitkgp.github.io/blog/creating-graphical-overview-with-d3.html</link><dc:creator>Vivek Rai</dc:creator><description>&lt;p&gt;This is a follow up of the &lt;a class="reference external" href="https://vivekiitkgp.github.io/blog/understanding-blast-output.html"&gt;previous post&lt;/a&gt;
where I was working with understanding and parsing the BLAST output data for
creating the data layer in SequenceServer. A very critical and often demanded
feature for the application was the ability to have a graphical overview of all
the obtained hits. It had been sitting on project's urgent list for quite a
long time and couldn't be delayed any longer. So, after having a discussion
with project maintainer Priyam, I assigned this task to myself.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;There were a couple of options for solving this problem.  Initially, we
considered using &lt;a class="reference external" href="http://chmille4.github.io/Scribl/"&gt;Scribl&lt;/a&gt;, an HTML5 canvas based library written specifically for
drawing genomic regions, alignments, assembly data and so on. However, the
features and flexibility that we were looking for wasn't simply available. And
even if it was, it required a good amount of overriding on our part.&lt;/p&gt;
&lt;img alt="../files/d3.png" class="align-center" src="https://vivekiitkgp.github.io/files/d3.png" style="width: 300pt;"&gt;
&lt;p&gt;The second obvious choice was the use of &lt;a class="reference external" href="http://d3js.org"&gt;d3.js&lt;/a&gt; Javascript library, a powerful
data-driven visualization generator. It's fairly low level and allows a large
degree of custom control and manipulation over components, thereby allowing
users to create rich, high quality graphics rendered in &lt;a class="reference external" href="https://developer.mozilla.org/en/docs/Web/SVG"&gt;SVG&lt;/a&gt;. The library can
be easily powered by the data obtained directly from the backend layer.
However, a more elegant choice was to remove this dependency on the backend and
disperse all the necessary information inside the page itself using the HTML5
data attributes. These data-attributes would then be highly useful, not only
for obtaining data but also for applying custom styling and dynamic behavior
using JS. For example, you could just do&lt;/p&gt;
&lt;pre class="code js literal-block"&gt;
&lt;span class="cm"&gt;/* This iterates over all elements with the mentioned data-attrib
   See public/js/jquery.graphit.js */&lt;/span&gt;
&lt;span class="nx"&gt;$&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[data-graphit='overview']"&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;each&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="kd"&gt;function&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;i&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="cm"&gt;/* Do stuff here */&lt;/span&gt;
&lt;span class="p"&gt;});&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;After the basic idea was conceived, I started playing around a little with d3
and found it quite interesting. Priyam then showed me the BLAST interface of
&lt;a class="reference external" href="http://naked-mole-rat.org/blast"&gt;naked-mole-rat.org&lt;/a&gt;, a naked mole-rat
genome resource. They had implemented a graphical overview feature similar to
that used by NCBI except the fact that it was written using d3.&lt;/p&gt;
&lt;div class="figure align-right" style="width: 350pt"&gt;
&lt;a class="reference external image-reference" href="https://vivekiitkgp.github.io/files/ncbi.png"&gt;&lt;img alt="Graphical overview shown by NCBI" src="https://vivekiitkgp.github.io/files/ncbi.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;NCBI's graphical overview (uses tables)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;Since, I was relatively new to programming in Javascript, their implementation
really helped me to think of my approach and come up with implementation of
mine. The initial code I wrote went under a lot of changes with feedback from
Priyam. Although we initially started with an inspiration from NCBI's graphical
overview (shown beside) we improved many things over theirs e.g., the hits in
our graphical overview were sorted by evalue, a gradient color scheme to
display the strength and weakness of hits etc.,&lt;/p&gt;
&lt;p&gt;Finally,&lt;/p&gt;
&lt;ol class="arabic simple"&gt;
&lt;li&gt;Implemented the data collection using data-attribs,&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code rhtml literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;%&lt;/span&gt; &lt;span class="n"&gt;hit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hsps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;div&lt;/span&gt;
      &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"hsps"&lt;/span&gt; &lt;span class="na"&gt;id=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt;&lt;span class="s2"&gt;"Query_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_hit_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;hit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;_&lt;/span&gt;&lt;span class="si"&gt;#{&lt;/span&gt;&lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;number&lt;/span&gt;&lt;span class="si"&gt;}&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
      &lt;span class="na"&gt;data-hsp-evalue=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;evalue&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;data-hsp-start=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qstart&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;
      &lt;span class="na"&gt;data-hsp-end=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;qend&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt; &lt;span class="na"&gt;data-hsp-frame=&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="cp"&gt;&amp;lt;%=&lt;/span&gt; &lt;span class="n"&gt;hsp&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hframe&lt;/span&gt; &lt;span class="cp"&gt;%&amp;gt;&lt;/span&gt;&lt;span class="s"&gt;"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;table&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"table-hsp"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
    ..
  &lt;span class="nt"&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;ol class="arabic simple" start="2"&gt;
&lt;li&gt;Packed the whole code in the form of a Jquery &lt;a class="reference external" href="https://github.com/vivekiitkgp/sequenceserver/blob/14d9febd115b02fff1a98e9659e0cb756633e9c9/public/js/jquery.graphit.js"&gt;plugin&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Connected the HSPs per hit by a thin line without which the
interpretation of results was little non obvious.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;In the meantime, we were upgrading to &lt;strong&gt;Bootstrap 3&lt;/strong&gt; which broke and re-broke
my implementation everytime. Each time, when I'll sit to rewrite the it again,
I would come up with a new and better understanding of my code. All this
however, happened only after a lot of experimentation which I didn't talk about
much in the post due to lack of time. Nevertheless, there were also a bunch of
critical bug fixes and improvements in the backend code which can be followed
&lt;a class="reference external" href="https://github.com/vivekiitkgp/sequenceserver/commits/graph_fixtures"&gt;here&lt;/a&gt;. In the end, I feel that the newer and in development version is much
more interactive, elegant and easy to use than the previous ones. Here is a
quick snapshot of the graphical overview for a sample BLAST hit.&lt;/p&gt;
&lt;div class="figure align-center"&gt;
&lt;a class="reference external image-reference" href="https://vivekiitkgp.github.io/files/graph.png"&gt;&lt;img alt="SequenceServer's graphical overview" src="https://vivekiitkgp.github.io/files/graph.png"&gt;&lt;/a&gt;
&lt;p class="caption"&gt;SequenceServer's graphical overview (using D3)&lt;/p&gt;
&lt;/div&gt;
&lt;p&gt;The current source code of the plugin can be found on &lt;a class="reference external" href="https://github.com/vivekiitkgp/sequenceserver/graphic_fixtures"&gt;Github&lt;/a&gt;.  Feel free to
clone and run locally on your machine. If not, an online version has also been
deployed at &lt;a class="reference external" href="http://antgeomes.org/sequenceserver"&gt;antgenomes.org/sequenceserver&lt;/a&gt; for convenient testing. However, I
would like to point out that there will be a lot of planned and unplanned
changes happening frequently. So, if you plan to use SequenceServer for
production, please use &lt;a class="reference external" href="https://github.com/yannickwurm/sequenceserver"&gt;this&lt;/a&gt;
version until we roll out refined one (very soon).&lt;/p&gt;
&lt;p&gt;I wanted to talk more about d3 and my plans to complete a couple of data analysis projects
with its help. However, let's save it for some time later.&lt;/p&gt;</description><category>d3.js</category><category>javascript</category><category>jquery</category><category>sequenceserver</category><guid>https://vivekiitkgp.github.io/blog/creating-graphical-overview-with-d3.html</guid><pubDate>Fri, 22 Aug 2014 01:52:27 GMT</pubDate></item><item><title>Understanding BLAST Output</title><link>https://vivekiitkgp.github.io/blog/understanding-blast-output.html</link><dc:creator>Vivek Rai</dc:creator><description>&lt;p&gt;In the last post, I mentioned about a project I was trying to work on -
&lt;a class="reference external" href="http://www.sequenceserver.com"&gt;SequenceServer&lt;/a&gt;. Also, in the end I
said that I would be writing about the BLAST algorithm (which is the
backbone of this project) and how does it works so efficiently in
producing alignments even with very long sequences. However, In this
post I would like to talk about BLAST program and it's output before we
go into the algorithm some time later.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;After talking to &lt;a class="reference external" href="https://github.com/yeban"&gt;Priyam&lt;/a&gt; (one of the
project collaborators), I decided to work towards solving the &lt;a class="reference external" href="https://github.com/yannickwurm/sequenceserver/issues/21"&gt;issue
21&lt;/a&gt;, which
in turn would help us to solve a large number of other dependent issues
as well. This was supposed to be a major improvement and I really liked
the idea of it. Especially since it was concerned with understanding the
BLAST program and its output format.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Background&lt;/em&gt;: &lt;a class="reference external" href="https://github.com/yannickwurm/sequenceserver/issues/21"&gt;Issue
21&lt;/a&gt; deals
with displaying an overview graphic for the output results obtained from
blasting. This is a nice feature as it adds more towards visualizing and
understanding the data easily (than going over a large number of hits in
many cases). The problem however is that because of the hacky way in
which the current implementation worked for displaying the final output
results, it was not very easy to work with generation of visuals. The
data generated from BLAST output had to be parsed first into a data
layer and then interfaced with other features like displaying overview
graphic or other rich information. This required three things from my
side - Ruby, BLAST, and Patience.&lt;/p&gt;
&lt;div class="section" id="x-part-i"&gt;
&lt;h2&gt;[x] Part I&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;BLAST Output&lt;/strong&gt;: The blast output format can be reconfigured using the
&lt;tt class="docutils literal"&gt;outfmt&lt;/tt&gt; option which is described in the NCBI's &lt;a class="reference external" href="https://vivekiitkgp.github.io/blog/www.ncbi.nlm.nih.gov/books/NBK1763/?report=reader#!po=91.5094"&gt;BLAST
Manual&lt;/a&gt;.
The sample XML output (standard settings) has the following structure
(for a real example
&lt;a class="reference external" href="https://gist.github.com/vivekiitkgp/e9fb422f177bec7f56b6#file-blast-xml"&gt;blast.xml&lt;/a&gt;):&lt;/p&gt;
&lt;pre class="code xml literal-block"&gt;
&lt;span class="cp"&gt;&amp;lt;?xml version="1.0"?&amp;gt;&lt;/span&gt;
&lt;span class="cp"&gt;&amp;lt;!DOCTYPE BlastOutput PUBLIC "-//NCBI//NCBI BlastOutput/EN" "http://www.ncbi.nlm.nih.gov/dtd/NCBI_BlastOutput.dtd"&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;BlastOutput&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;BlastOutput_program&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;BlastOutput_version&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;BlastOutput_reference&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;BlastOutput_db&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;BlastOutput_query-ID&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;BlastOutput_query-def&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;BlastOutput_query-len&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;BlastOutput_param&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Parameters&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Parameters_matrix&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Parameters_expect&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Parameters_gap-open&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Parameters_gap-extend&amp;gt;&lt;/span&gt;
      &lt;span class="nt"&gt;&amp;lt;Parameters_filter&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/Parameters&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/BlastOutput_param&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;BlastOutput_iterations&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Iteration&amp;gt;&lt;/span&gt;
  -- Iteration details --
&lt;span class="nt"&gt;&amp;lt;Iteration_hits&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Hit&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Hit_num&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Hit_id&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Hit_def&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Hit_accession&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Hit_len&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;Hit_hsps&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;Hsp&amp;gt;&lt;/span&gt;
  -- HSP Details --
    &lt;span class="nt"&gt;&amp;lt;/Hsp&amp;gt;&lt;/span&gt;
  &lt;span class="nt"&gt;&amp;lt;/Hit_hsps&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Hit&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Hit&amp;gt;&lt;/span&gt; &lt;span class="nt"&gt;&amp;lt;/Hit&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Iteration_hits&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;Iteration_stat&amp;gt;&lt;/span&gt;
  -- Statistics about Query --
&lt;span class="nt"&gt;&amp;lt;/Iteration_stat&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/Iteration&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/BlastOutput_iterations&amp;gt;&lt;/span&gt;
&lt;span class="nt"&gt;&amp;lt;/BlastOutput&amp;gt;&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;The XML output is as detailed as it could be including all the information
about Hit's &lt;a class="reference external" href="https://genomevolution.org/wiki/index.php/High-scoring_segment_pair"&gt;HSP&lt;/a&gt;, the
&lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;query-database&lt;/span&gt;&lt;/tt&gt;, &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;alignment-lengths&lt;/span&gt;&lt;/tt&gt;, the &lt;tt class="docutils literal"&gt;query&lt;/tt&gt; &amp;amp; &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;aligned-sequences&lt;/span&gt;&lt;/tt&gt;
along with the matches between them, and &lt;tt class="docutils literal"&gt;&lt;span class="pre"&gt;query-statistics&lt;/span&gt;&lt;/tt&gt;. This
is as useful as it could be and helps to generate very detailed statistics and
overview too. I would recommend one to look at the given example of blast.xml
to understand what kind of data is generated. To parse this generated XML
output easily, I used the &lt;a class="reference external" href="https://rubygems.org/gems/ox"&gt;Ox&lt;/a&gt; rubygem, which
is a simple and &lt;a class="reference external" href="http://www.ohler.com/dev/xml_with_ruby/xml_with_ruby.html"&gt;faster&lt;/a&gt; alternative of
other XML parsers available in Ruby. In the beginning, I generated a simple
Hash out of this parsed data using recursive traversal along the elements.&lt;/p&gt;
&lt;pre class="code ruby literal-block"&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;report!&lt;/span&gt;
  &lt;span class="c1"&gt;# Generates BLAST report which one or more multiple Query objects&lt;/span&gt;
  &lt;span class="c1"&gt;# based on the blast query string.&lt;/span&gt;
  &lt;span class="n"&gt;parsed_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Ox&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vi"&gt;@result&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="n"&gt;hashed_out&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;node_to_dict&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;parsed_out&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
  &lt;span class="vi"&gt;@program&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashed_out&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"BlastOutput_program"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
  &lt;span class="vi"&gt;@querydb&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;hashed_out&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"BlastOutput_db"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;

  &lt;span class="n"&gt;hashed_out&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"BlastOutput_iterations"&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
    &lt;span class="vi"&gt;@queries&lt;/span&gt; &lt;span class="o"&gt;||=&lt;/span&gt; &lt;span class="p"&gt;{}&lt;/span&gt;
    &lt;span class="vi"&gt;@queries&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Query&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{},&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"Statistics"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="c1"&gt;# Ensure a hit object is received. No hits, returns a newline.&lt;/span&gt;
    &lt;span class="c1"&gt;# Note that checking to "\n" doesn't work since n[4] = ["\n"]&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]==[&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;
      &lt;span class="vi"&gt;@queries&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]][&lt;/span&gt;&lt;span class="ss"&gt;:hits&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;"No hits found."&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;
      &lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;each&lt;/span&gt; &lt;span class="k"&gt;do&lt;/span&gt; &lt;span class="o"&gt;|&lt;/span&gt;&lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;|&lt;/span&gt;
        &lt;span class="vi"&gt;@queries&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]][&lt;/span&gt;&lt;span class="ss"&gt;:hits&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;Hit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                                                 &lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="p"&gt;{})&lt;/span&gt;
        &lt;span class="vi"&gt;@queries&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="o"&gt;]][&lt;/span&gt;&lt;span class="ss"&gt;:hits&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;]][&lt;/span&gt;&lt;span class="ss"&gt;:hsp&lt;/span&gt;&lt;span class="o"&gt;]&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="no"&gt;HSP&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;new&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="n"&gt;hits&lt;/span&gt;&lt;span class="o"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="o"&gt;][&lt;/span&gt;&lt;span class="s2"&gt;"Hsp"&lt;/span&gt;&lt;span class="o"&gt;].&lt;/span&gt;&lt;span class="n"&gt;values&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
      &lt;span class="k"&gt;end&lt;/span&gt;
    &lt;span class="k"&gt;end&lt;/span&gt;
  &lt;span class="k"&gt;end&lt;/span&gt;
&lt;span class="k"&gt;end&lt;/span&gt;
&lt;/pre&gt;
&lt;p&gt;This Hash is then used for easy templating (using
&lt;a class="reference external" href="http://ruby-doc.org/stdlib-1.9.3/libdoc/erb/rdoc/ERB.html"&gt;erb&lt;/a&gt;) and
display of results in a more elegant and modular way. This keeps the
data at one place which can then be used for overview graphic display or
integration of other features and bug fixes in near future. All my work
related to this can be found at
&lt;a class="reference external" href="https://github.com/vivekiitkgp/sequenceserver/tree/issue21"&gt;@issue21&lt;/a&gt;
branch. The code written till now, is very premature and &lt;em&gt;just&lt;/em&gt; works. I
plan to refactor it majorily and incorporate some very nice features of
Ruby language (which I am desperately trying to understand).&lt;/p&gt;
&lt;p&gt;&lt;a class="reference external" href="https://drive.google.com/file/d/0B3eGCB261PalWTJnODloLXAtdGM/edit?usp=sharing"&gt;Here&lt;/a&gt;
is a snapshot of what current output looks like, when SS is run.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="o-part-ii"&gt;
&lt;h2&gt;[O] Part II&lt;/h2&gt;
&lt;p&gt;The second part of this task deals with actually displaying the overview
graphic for the hits obtained using SS. To give an idea of what it looks
like, see &lt;a class="reference external" href="http://www.biodalliance.org/"&gt;here&lt;/a&gt; and
&lt;a class="reference external" href="http://canvasxpress.org/genome.html"&gt;here&lt;/a&gt;. The target is to display
similar graphic (but simple and easy to load/configure) for each hit in
the SS's output. I am yet to start working on and possibly the next post
could be derived out of that work.&lt;/p&gt;
&lt;p&gt;I would be very glad if you drop by to review my code and send in any
suggestions. Feel free to reach me by whatever means.&lt;/p&gt;
&lt;/div&gt;</description><category>blast</category><category>ruby</category><category>sequenceserver</category><guid>https://vivekiitkgp.github.io/blog/understanding-blast-output.html</guid><pubDate>Sat, 12 Jul 2014 21:17:45 GMT</pubDate></item><item><title>Easy BLAST tool - SequenceServer</title><link>https://vivekiitkgp.github.io/blog/easy-blast-tool-sequenceserver.html</link><dc:creator>Vivek Rai</dc:creator><description>&lt;p&gt;Contributing to open source is quite an exciting journey. I embarked upon this
mission recently with few contributions to &lt;a class="reference external" href="http://www.sequenceserver.com/"&gt;SequenceServer - A BLAST tool&lt;/a&gt;, which lets you set up custom BLAST+ server to perform BLAST queries with your
own database locally through a web interface. For those who are not familiar
with &lt;strong&gt;BLAST&lt;/strong&gt; or Basic Local Search Alignment Tool &lt;a class="citation-reference" href="https://vivekiitkgp.github.io/blog/easy-blast-tool-sequenceserver.html#paper" id="id1"&gt;[paper]&lt;/a&gt; - it is an algorithm which allows
quick comparison of biological sequence information which are long strings consisting
of amino acids (in case of proteins) or nucleotides (in case of nucleic acids).
It is exceedingly used by biologists all over the world to study newer
organisms, discovery of genes and finding similarity between proteins and so
on. One can see a working instance of the tool at &lt;a class="reference external" href="http://antgenomes.org/blast"&gt;Ant Genomes&lt;/a&gt; website, maintained by one of the developers
and Professor at Queen Mary University London, &lt;a class="reference external" href="http://www.sbcs.qmul.ac.uk/staff/yannickwurm.html"&gt;Yannick Wurm&lt;/a&gt;. He's also the overseerer of the project.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;p&gt;The program has already completed its major part of development and its stable version
is readily available for use. However, there were many &lt;a class="reference external" href="https://github.com/yannickwurm/sequenceserver/issues"&gt;issues&lt;/a&gt; or feature requests
that were pending and can be worked upon. I got in touch with the maintainers and submitted
three pull requests for small few bugs and a feature. It was not a big task but I was
quite motivated with this small experience of working with the community, engaging with
the developers and obviously working with git. Also, since the tool is written in Ruby, I
had to spend some time brushing up the concepts of Ruby and understanding the code structure,
and methodologies followed for the development. Ruby is a concise and appealing language which is not very tough to
understand once you are in with the flow. Anyway, I plan to continue my contribution to sequenceserver
for quite some time and also encourage you to take a look if you are even just a little bit of
Biology enthusiast.&lt;/p&gt;
&lt;p&gt;I will talk more about BLAST algorithm in general in my next post.&lt;/p&gt;
&lt;table class="docutils citation" frame="void" id="paper" rules="none"&gt;
&lt;colgroup&gt;&lt;col class="label"&gt;&lt;col&gt;&lt;/colgroup&gt;
&lt;tbody valign="top"&gt;
&lt;tr&gt;&lt;td class="label"&gt;&lt;a class="fn-backref" href="https://vivekiitkgp.github.io/blog/easy-blast-tool-sequenceserver.html#id1"&gt;[paper]&lt;/a&gt;&lt;/td&gt;&lt;td&gt;: &lt;a class="reference external" href="http://www.blastalgorithm.com/"&gt;http://www.blastalgorithm.com/&lt;/a&gt;&lt;/td&gt;&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;</description><category>alignment</category><category>biology</category><category>blast</category><category>genes</category><category>sequenceserver</category><guid>https://vivekiitkgp.github.io/blog/easy-blast-tool-sequenceserver.html</guid><pubDate>Mon, 26 May 2014 11:20:16 GMT</pubDate></item></channel></rss>